variables:
  VERSION: "2.8.7"
  APP_NAME: "td_dd"
  ECR_NAMESPACE: "truedat"

stages:
  - build
  - test
  - publish
  - deploy

build:
  stage: build
  script:
    - docker run --rm -v $(pwd):/code:ro -w /code --entrypoint=/code/ci/build.sh bluetab/amazonlinux-phoenix-postgresql:20180621095335
  artifacts:
    untracked: true

test:
  stage: test
  script:
    - docker run --rm -v $(pwd):/code:ro -w /code --entrypoint=/code/ci/test.sh bluetab/amazonlinux-phoenix-postgresql-redis:20180709225133
  artifacts:
    untracked: true

publish:
  stage: publish
  only:
    - master
    - tags
  script:
    - git branch -f master HEAD
    - export VERSION=${CI_COMMIT_TAG:-${VERSION}-alpha.${CI_PIPELINE_ID}}
    - docker build --build-arg APP_VERSION=${VERSION} --build-arg APP_NAME=${APP_NAME} --build-arg MIX_ENV=prod -t ${ECR_NAMESPACE}/${CI_PROJECT_NAME}:${CI_COMMIT_SHA} .
    - docker run --rm -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION mesosphere/aws-cli ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION} | awk '{ sub("\r$", ""); print }' > output
    - bash -f output
    - export ECR=$(cat output | egrep -o 'https?://[^ ]+' | awk -F/ '{print $3}')
    - rm output
    - docker tag ${ECR_NAMESPACE}/${CI_PROJECT_NAME}:${CI_COMMIT_SHA} ${ECR}/${ECR_NAMESPACE}/${CI_PROJECT_NAME}:${VERSION}
    - docker push ${ECR}/${ECR_NAMESPACE}/${CI_PROJECT_NAME}:${VERSION}

deploy:
  stage: deploy
  environment:
    name: prod
  only:
    - master
    - tags
  script:
    - git branch -f master HEAD
    - export VERSION=${CI_COMMIT_TAG:-${VERSION}-alpha.${CI_PIPELINE_ID}}
    - docker run --rm -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION mesosphere/aws-cli ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION} > output
    - bash -f output
    - export ECR=$(cat output | egrep -o 'https?://[^ ]+' | awk -F/ '{print $3}')
    - rm output
    - docker tag ${ECR_NAMESPACE}/${CI_PROJECT_NAME}:${CI_COMMIT_SHA} ${ECR}/${ECR_NAMESPACE}/${CI_PROJECT_NAME}:latest
    - docker push ${ECR}/${ECR_NAMESPACE}/${CI_PROJECT_NAME}:latest
    - docker run --rm -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION -e ECS_CLUSTER -e ECS_SERVICE mesosphere/aws-cli ecs update-service --force-new-deployment --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE}
    # - docker run --rm -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION -e ECS_CLUSTER -e ECS_SERVICE mesosphere/aws-cli ecs wait services-stable --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE}
