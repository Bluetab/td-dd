stages:
  - build
  - test
  - deploy

build:
  stage: build
  script:
    - docker run --rm -v $(pwd):/code:ro -w /code --entrypoint=/code/ci/build.sh bluetab/amazonlinux-phoenix-postgresql-redis:20180709225133
  artifacts:
    untracked: true

test:
  stage: test
  script:
    - docker run --rm -v $(pwd):/code:ro -w /code --entrypoint=/code/ci/test.sh bluetab/amazonlinux-phoenix-postgresql-redis:20180709225133
  artifacts:
    untracked: true

deploy:
  stage: deploy
  environment:
    name: prod
  only:
    - master
  script:
    - git branch -f master HEAD
    - export VERSION=$(grep -e '\bversion:' mix.exs | cut -d\" -f2)
    - export REDIS_URI=$(echo $REDIS_URI | sed -e "s/\//\\\\\//g")
    - docker build --build-arg APP_VERSION=${VERSION} --build-arg APP_NAME=td_dq --build-arg MIX_ENV=prod -t bluetab-truedat/$CI_PROJECT_NAME:latest .
    - docker run --rm -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION mesosphere/aws-cli ecr get-login --no-include-email --region $AWS_DEFAULT_REGION | awk '{ sub("\r$", ""); print }' > output
    - bash -f output
    - export ECR=$(cat output | egrep -o 'https?://[^ ]+' | awk -F/ '{print $3}')
    - rm output
    - docker tag bluetab-truedat/$CI_PROJECT_NAME:latest $ECR/bluetab-truedat/$CI_PROJECT_NAME:latest
    - docker tag bluetab-truedat/$CI_PROJECT_NAME:latest $ECR/bluetab-truedat/$CI_PROJECT_NAME:${VERSION}
    - docker push $ECR/bluetab-truedat/$CI_PROJECT_NAME:latest
    - docker push $ECR/bluetab-truedat/$CI_PROJECT_NAME:${VERSION}
    - docker run --rm -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION -e ECS_CLUSTER -e ECS_SERVICE mesosphere/aws-cli ecs update-service --force-new-deployment --cluster $ECS_CLUSTER --service $ECS_SERVICE
    # - docker run --rm -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION -e ECS_CLUSTER -e ECS_SERVICE mesosphere/aws-cli ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
