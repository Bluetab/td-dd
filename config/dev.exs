use Mix.Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with brunch.io to recompile .js and .css sources.
config :td_dq, TdDqWeb.Endpoint,
  http: [port: 4004],
  url: [host: "localhost", port: 4004],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: []

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# command from your terminal:
#
#     openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -keyout priv/server.key -out priv/server.pem
#
# The `http:` config above can be replaced with:
#
#     https: [port: 4000, keyfile: "priv/server.key", certfile: "priv/server.pem"],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Do not include metadata nor timestamps in development logs
config :logger, :console,
  format: (System.get_env("EX_LOGGER_FORMAT") || "[$level] $message") <> "\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Configure your database
config :td_dq, TdDq.Repo,
  username: "postgres",
  password: "postgres",
  database: "td_dq_dev",
  hostname: "localhost",
  pool_size: 10

config :td_dq, :audit_service,
  api_service: TdDqWeb.ApiServices.HttpTdAuditService,
  audit_host: "localhost",
  audit_port: "4007",
  audit_domain: ""

config :td_dq, qc_types_file: "static/qc_types_dev.json"
config :td_dq, qr_types_file: "static/qr_types_dev.json"

config :td_perms, redis_host: "localhost"

config :td_dq, :elasticsearch,
  search_service: TdDq.Search,
  es_host: "localhost",
  es_port: 9200,
  type_name: "doc"
